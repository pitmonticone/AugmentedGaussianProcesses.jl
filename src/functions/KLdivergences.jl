"""Compute the KL Divergence between the GP Prior and the variational distribution"""
GaussianKL(model::AbstractGP) = sum(broadcast(GaussianKL,model.f,get_Z(model)))

GaussianKL(gp::Abstract_GP,X::AbstractMatrix) = GaussianKL(gp.Œº,gp.Œº‚ÇÄ(X),gp.Œ£,gp.K)

function GaussianKL(Œº::AbstractVector{T},Œº‚ÇÄ::AbstractVector,Œ£::Matrix{T},K::PDMat{T,Matrix{T}}) where {T<:Real}
    0.5*(-logdet(Œ£)+logdet(K)+tr(K\Œ£)+invquad(K,Œº-Œº‚ÇÄ)-length(Œº))
end

"""Compute the KL Divergence between the Sparse GP Prior and the variational distribution for the sparse variational model"""
function GaussianKL(model::OnlineVGP)
    return 0.5*sum(opt_trace.(model.invKmm,model.Œ£+model.Œº.*transpose.(model.Œº)).-model.nFeatures.-logdet.(model.Œ£).-logdet.(model.invKmm))
end

function extraKL(model::VGP)
    return 0
end

function extraKL(model::SVGP)
    return 0
end

"""Return the extra KL term containing the divergence with the GP at time t and t+1"""
function extraKL(model::OnlineVGP)
    K‚Çê‚Çê = kernelmatrix.(model.Z‚Çê,model.kernel)
    L = 0.5*sum(broadcast((ùìõ‚Çê,K‚Çê‚Çê,invD‚Çê,KÃÉ‚Çê,Œ£,Kab,Œ∑‚ÇÅ,Œ∫‚Çê,Œ∫‚ÇêŒº)->
    - ùìõ‚Çê
    - opt_trace(invD‚Çê,K‚Çê‚Çê)
    - opt_trace(invD‚Çê,Œ∫‚Çê*(Œ£*Œ∫‚Çê'-Kab'))
    + 2*dot(Œ∑‚ÇÅ,Œ∫‚ÇêŒº) - dot(Œ∫‚ÇêŒº,invD‚Çê*Œ∫‚ÇêŒº)
    ,model.prevùìõ‚Çê,K‚Çê‚Çê,model.invD‚Çê,model.KÃÉ‚Çê,model.Œ£,model.Kab,model.prevŒ∑‚ÇÅ,model.Œ∫‚Çê,model.Œ∫‚Çê.*model.Œº))
     #Precompute this part for the next ELBO
    return L
end



InverseGammaKL(Œ±,Œ≤,Œ±‚Çö,Œ≤‚Çö) = GammaKL(Œ±,Œ≤,Œ±‚Çö,Œ≤‚Çö)
"""
    KL(q(œâ)||p(œâ)), where q(œâ) = Ga(Œ±,Œ≤) and p(œâ) = Ga(Œ±‚Çö,Œ≤‚Çö)
"""
function GammaKL(Œ±,Œ≤,Œ±‚Çö,Œ≤‚Çö)
    sum((Œ±-Œ±‚Çö).*digamma(Œ±) .- log.(gamma.(Œ±)).+log.(gamma.(Œ±‚Çö)) .+  Œ±‚Çö.*(log.(Œ≤).-log.(Œ≤‚Çö)).+Œ±.*(Œ≤‚Çö.-Œ≤)./Œ≤)
end

"""
    KL(q(œâ)||p(œâ)), where q(œâ) = Po(œâ|Œª) and p(œâ) = Po(œâ|Œª‚ÇÄ)
"""
function PoissonKL(Œª::AbstractVector{T},Œª‚ÇÄ::Real) where {T}
    Œª‚ÇÄ*length(Œª)-(one(T)+log(Œª‚ÇÄ))*sum(Œª)+sum(xlogx,Œª)
end

"""
    KL(q(œâ)||p(œâ)), where q(œâ) = Po(œâ|Œª) and p(œâ) = Po(œâ|Œª‚ÇÄ) with œà = E[log(Œª‚ÇÄ)]
"""
function PoissonKL(Œª::AbstractVector{<:Real},Œª‚ÇÄ::AbstractVector{<:Real},œà::AbstractVector{<:Real})
    sum(Œª‚ÇÄ)-sum(Œª)+sum(xlogx,Œª)-dot(Œª,œà)
end


"""KL(q(œâ)||p(œâ)), where q(œâ) = PG(b,c) and p(œâ) = PG(b,0). Œ∏ = ùë¨[œâ]"""
function PolyaGammaKL(b,c,Œ∏)
    dot(b,logcosh.(0.5*c))-0.5*dot(abs2.(c),Œ∏)
end


"""
    Entropy of GIG variables with parameters a,b and p and omitting the derivative d/dpK_p cf <https://en.wikipedia.org/wiki/Generalized_inverse_Gaussian_distribution#Entropy>
"""
function GIGEntropy(a,b,p)
    sqrtab = sqrt.(a.*b)
    return sum(0.5*log.(a./b))+sum(log.(2*besselk.(p,sqrtab)))+ sum(0.5*sqrtab./besselk.(p,sqrtab).*(besselk.(p+1,sqrtab)+besselk.(p-1,sqrtab)))
end
